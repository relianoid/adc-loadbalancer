#!/usr/bin/bash
# shellcheck disable=SC2016
###############################################################################
#
#    RELIANOID Software License
#    This file is part of the RELIANOID Load Balancer software package.
#
#    Copyright (C) 2014-today RELIANOID
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

set -eu
trap 'echo Failed at ${LINENO}: $BASH_COMMAND' ERR

[ ! "$1" == "configure" ] && echo "Installation aborted $1 $2" && exit 1

_global_conf="/usr/local/relianoid/config/global.conf"

if [ ! -f $_global_conf ]; then
    # install global.conf
    _global_conf_template="/usr/local/relianoid/share/global.conf.template"
    tag='#update'

    cp $_global_conf_template $_global_conf

    # remove #update tag
    /usr/bin/sed -E "s/;$tag\$/;/g" -i $_global_conf
else
    #
    # run migration
    #
    # perl -MRelianoid::Config -e "migrateConfigFiles()"

    # upgrading global.conf
    /usr/local/relianoid/bin/checkglobalconf
fi

# load global variables
. /usr/local/relianoid/bin/load_global_conf
load_global_conf

# Create the GUI system group
groupadd -f webgui
usermod -a -G webgui root

## System services
if [ "$(systemctl get-default)" != "multi-user.target" ]; then
    systemctl set-default multi-user.target
fi

# Remove relianoid from /etc/init.d/ssh required services
if grep --quiet relianoid /etc/init.d/ssh; then
    sed -i 's/relianoid//g' /etc/init.d/ssh
fi

if systemctl -q is-active sshd.service; then
    systemctl reload sshd.service
fi

# SNMP service
perl -MRelianoid::SNMP -E "&setSnmpdDefaultConfig();"

## Create configuration files

# Install or update Relianoid cron file
cp /usr/local/relianoid/share/relianoid.cron /etc/cron.d/relianoid

# create Web server
if [ ! -f "$http_server_cert" ]; then
    cp -rf "$http_server_cert_tpl" "$http_server_cert"
fi
if [ ! -f "$http_server_key" ]; then
    cp -rf "$http_server_key_tpl" "$http_server_key"
fi

# Install check_uplink
BIN_PATH="/usr/local/relianoid/bin"
LIBEXEC_PATH="/usr/lib/nagios/plugins"
if [ ! -L $LIBEXEC_PATH/check_uplink ]; then
    ln -s $BIN_PATH/check_uplink $LIBEXEC_PATH/check_uplink
fi

# Apply all migrating scripts to RELIANOID
MIGRATIONS_DIR="/usr/local/relianoid/migrations"
for SCRIPT in "$MIGRATIONS_DIR"/*; do $SCRIPT; done

## Migrations from Zevenet to Relianoid

rm -f /etc/cron.d/zevenet

RELIANOID_PATH=$lb_dir
ZENRRD_DIR="${RELIANOID_PATH}/app/zenrrd"
if [[ -d "${ZENRRD_DIR}" && ! -L "${ZENRRD_DIR}" ]]; then
    mv "${RELIANOID_PATH}/app/zenrrd/rrd"/* "${RELIANOID_PATH}/var/noid-collector/rrd/" 2> /dev/null
    rm -r "$ZENRRD_DIR"

    # leaves a symbolic link $RELIANOID_PATH/app/zenrrd for compatibility
    ln -s "../var/noid-collector" "${RELIANOID_PATH}/app/zenrrd"
fi

# Migrate API user
if id --user zapi &> /dev/null; then
    usermod --login api zapi
fi

zlb_start="/usr/local/relianoid/config/zlb-start"
zlb_stop="/usr/local/relianoid/config/zlb-stop"
if [ -f $zlb_start ]; then
    mv $zlb_start $start_script
fi
if [ -f $zlb_stop ]; then
    mv $zlb_stop $stop_script
fi
## End of: Migrations from Zevenet to Relianoid

# Create noid-start and noid-stop if they don't exist yet
if [ ! -f "$start_script" ]; then
    cp "$start_template" "$start_script"
fi
if [ ! -f "$stop_script" ]; then
    cp "$stop_template" "$stop_script"
fi

stop_vpn_services () {
    # strongswan service for RELIANOID vpn
    systemctl stop ipsec 2>/dev/null
    systemctl --quiet --no-reload disable ipsec 2>/dev/null

    # add strongswan config dir to apparmor local configuration
    if [ -f /etc/apparmor.d/local/usr.lib.ipsec.charon ]; then
        {
            echo "/usr/local/relianoid/app/strongswan/etc/ r,"
            echo "/usr/local/relianoid/app/strongswan/etc/* r,"
            echo "/usr/local/relianoid/config/vpn/ r,"
            echo "/usr/local/relianoid/config/vpn/* r,"
        } > /etc/apparmor.d/local/usr.lib.ipsec.charon
    fi

    if [ -f /etc/apparmor.d/local/usr.lib.ipsec.stroke ]; then
        {
            echo "/usr/local/relianoid/app/strongswan/etc/ r,"
            echo "/usr/local/relianoid/app/strongswan/etc/* r,"
            echo "/usr/local/relianoid/config/vpn/ r,"
            echo "/usr/local/relianoid/config/vpn/* r,"
        } > /etc/apparmor.d/local/usr.lib.ipsec.stroke
    fi

    # reload profile if apparmor is installed
    if [ -f /sbin/apparmor_parser ]; then
        /sbin/apparmor_parser -R /etc/apparmor.d/usr.lib.ipsec.charon > /dev/null 2>&1 || true
        /sbin/apparmor_parser -R /etc/apparmor.d/usr.lib.ipsec.stroke > /dev/null 2>&1 || true
    fi

    # xl2tp service for RELIANOID vpn
    systemctl stop xl2tpd 2>/dev/null
    systemctl --quiet --no-reload disable xl2tpd 2>/dev/null
}

stop_vpn_services

# Initialize VPN
perl -MRelianoid::VPN::Action -e 'initVPNModule()' >/dev/null

# Restarting RELIANOID service
echo "RELIANOID will be unavailable while the service is restarting."
systemctl daemon-reload
systemctl stop relianoid.service
systemctl start relianoid.service

# Add RELIANOID Load Balancer service to boot process
systemctl enable relianoid

if systemctl list-unit-files zevenet.service >/dev/null; then
    systemctl disable zevenet
fi

cat > /etc/motd << 'EOF'

██████  ███████ ██      ██  █████  ███    ██  ██████  ██ ██████  
██   ██ ██      ██      ██ ██   ██ ████   ██ ██    ██ ██ ██   ██ 
██████  █████   ██      ██ ███████ ██ ██  ██ ██    ██ ██ ██   ██ 
██   ██ ██      ██      ██ ██   ██ ██  ██ ██ ██    ██ ██ ██   ██ 
██   ██ ███████ ███████ ██ ██   ██ ██   ████  ██████  ██ ██████  
                                                                 
RELIANOID ADC Community Edition
www.relianoid.com

 Need assistance?
 https://www.relianoid.com/contact-us/

EOF

if ! grep --quiet RELIANOID /etc/issue; then
    sh -c "echo 'RELIANOID Community Edition \\\n \l\n' >/etc/issue"
fi

if ! grep -q RELIANOID /etc/issue.net; then
    echo "RELIANOID Community Edition" >/etc/issue.net
fi

# Change prompt color
sed -i "s/1;30m/0;37m/g" /etc/bash.bashrc 2> /dev/null

# Cluster
sed -i '/changed-by-relianoid/d' /root/.bashrc &>/dev/null || true
sed -i '/^export PROMPT_COMMAND=.*zevenet-ce-cluster.status/d' /root/.bashrc &>/dev/null || true # Deprecate Zevenet

# Migrate ucarp location
old_ucarp_bin="\/usr\/local\/relianoid\/app\/ucarp\/sbin\/ucarp"
ucarp_conf="/usr/local/relianoid/app/ucarp/etc/cluster.conf"
if [ -f "$ucarp_conf" ]; then
    sed -i "s/\$ucarp=\"$old_ucarp_bin\";/\$ucarp=\"\/usr\/sbin\/ucarp\";/" $ucarp_conf
fi
# Cluster

#
# Setup for cloud providers
#
if grep --quiet "amazon" /sys/devices/virtual/dmi/id/bios_version; then
    /usr/local/relianoid/share/cloud/aws/setup.sh
elif grep --quiet "Google" /sys/devices/virtual/dmi/id/bios_version; then
    /usr/local/relianoid/share/cloud/gcp/setup.sh
elif grep --quiet "Microsoft Corporation" /sys/devices/virtual/dmi/id/sys_vendor; then
    # Check for Azure-specific fingerprint
    if grep -qi "azure" /sys/devices/virtual/dmi/id/product_uuid \
        || grep -qi "azure" /sys/devices/virtual/dmi/id/bios_version \
        || curl -H Metadata:true --noproxy "*" -s --max-time 2 \
            http://169.254.169.254/metadata/instance?api-version=2021-02-01 \
            | grep -q "compute"; then

        /usr/local/relianoid/share/cloud/azure/setup.sh
    fi
fi

# Configure apt repository
perl -E "require Relianoid::System::Packages; exit &setSystemPackagesRepo();"

echo "RELIANOID Load Balancer installation completed."
