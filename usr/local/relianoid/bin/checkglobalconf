#!/usr/bin/perl
###############################################################################
#
#    RELIANOID Software License
#    This file is part of the RELIANOID Load Balancer software package.
#
#    Copyright (C) 2014-today RELIANOID
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

# This script updates or generates the file global.conf:
#
# * If a variable on global.conf does not exist but exists on global.conf.template then adds the new variable on global.conf.
# * If a variable on global.conf.template equals "" do nothing.
# * If a variable on global.conf.template is equal to the variable on global.conf.template do nothing
# * If a variable on global.conf is not equal to variable on global.conf.template, the variable on globa.conf is not changed.
# * If a valiable's line on global.conf.template ends with #update, the variable is updated on global.conf.

use strict;
use warnings;
use feature qw(signatures);

use File::Copy;

my $gc_tmp_fn = "/tmp/global.conf.tmp";
my $gc_fn     = "/usr/local/relianoid/config/global.conf";
my $gc_tpl_fn = "/usr/local/relianoid/share/global.conf.template";
my $tag       = '#update';

unless (-f $gc_fn) {
    copy($gc_tpl_fn, $gc_fn);
    my $err = system("sed -E 's/;$tag\$/;/g' -i $gc_fn");
    exit $err;
}

open my $gc_tpl, '<', $gc_tpl_fn or die "Failed to open '$gc_tpl_fn': $!";
chomp(my @gc_tpl_ln = <$gc_tpl>);
close $gc_tpl;

open my $gconf, '<', $gc_fn or die "Failed to open '$gc_fn': $!";
chomp(my @gconf_ln = <$gconf>);
close $gconf;

my @gc_tmp_ln;

for my $tpl_line (@gc_tpl_ln) {
    my $newline = $tpl_line;

    # for lines starting with $
    if ($tpl_line =~ /^\$/) {
        my ($var, $new_value) = $tpl_line =~ /(.+)\s*=\s*(.+)/;

        # strip variable name
        $var =~ s/\$//;
        $var =~ s/\s*$//;    # important

        for my $gc_line (@gconf_ln) {
            next unless $gc_line =~ /^\$$var\s*=/;

            my (undef, $gc_value) = $gc_line =~ /(.+)\s*=\s*(.+)/;
            $gc_value  =~ s/^\s+//;
            $new_value =~ s/^\s+//;

            # update if the line is tagged to be updated
            if ($new_value =~ /$tag/i) {
                $tpl_line =~ s/\s*$tag//i;
                $newline = $tpl_line;
            }
            elsif ($gc_value !~ $new_value) {
                $newline = $gc_line;
            }

            last;
        }
    }

    push(@gc_tmp_ln, "$newline");
}

open my $gc_tmp, '>', $gc_tmp_fn or die "Failed to open '$gc_tmp_fn': $!";
print $gc_tmp join("\n", @gc_tmp_ln);
close $gc_tmp;

move($gc_tmp_fn, $gc_fn);
print "Update global.conf file done...\n";
