#!/usr/bin/perl
###############################################################################
#
#    RELIANOID Software License
#    This file is part of the RELIANOID Load Balancer software package.
#
#    Copyright (C) 2014-today RELIANOID
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

# This script updates or generates the file global.conf:
#
# * If a variable on global.conf does not exist but exists on global.conf.template then adds the new variable on global.conf.
# * If a variable on global.conf.template equals "" do nothing.
# * If a variable on global.conf.template is equal to the variable on global.conf.template do nothing
# * If a variable on global.conf is not equal to variable on global.conf.template, the variable on globa.conf is not changed.
# * If a valiable's line on global.conf.template ends with #update, the variable is updated on global.conf.

use strict;
use warnings;
use feature qw(signatures);

use File::Copy;

my $global_conf_filename          = "/usr/local/relianoid/config/global.conf";
my $global_conf_template_filename = "/usr/local/relianoid/share/global.conf.template";
my $tag                           = '#update';

# If global.conf doesn't exists, use the template
if (not -f $global_conf_filename) {
    copy($global_conf_template_filename, $global_conf_filename);
    exit system("sed -E 's/;$tag\$/;/g' -i $global_conf_filename");
}
else {
    # Migrate global.conf values of renamed variables to be kept
    if (system("grep -q '^\$zapikey=' $global_conf_filename")) {
        system("sed -i 's/^\$zapikey ?=/\$api_key=/' $global_conf_filename");
    }
}

sub get_file_lines ($filename) {
    if (open my $fh, '<', $filename) {
        chomp(my @lines = <$fh>);
        close $fh;

        return @lines;
    }
    else { die "Failed to open '$filename': $!"; }
}

my @template_gconf_lines = get_file_lines($global_conf_template_filename);
my @current_gconf_lines  = get_file_lines($global_conf_filename);

my @new_gconf_lines;

for my $template_line (@template_gconf_lines) {
    my $newline = $template_line;

    # for lines starting with $
    if ($template_line =~ /^\$/) {
        my ($var, $new_value) = $template_line =~ /(.+)\s*=\s*(.+)/;

        # strip variable name
        $var =~ s/\$//;
        $var =~ s/\s*$//;    # important

        for my $current_gconf_line (@current_gconf_lines) {
            next unless $current_gconf_line =~ /^\$$var\s*=/;

            my (undef, $gc_value) = $current_gconf_line =~ /(.+)\s*=\s*(.+)/;
            $gc_value  =~ s/^\s+//;
            $new_value =~ s/^\s+//;

            # update if the line is tagged to be updated
            if ($new_value =~ /$tag/i) {
                $template_line =~ s/\s*$tag//i;
                $newline = $template_line;
            }
            elsif ($gc_value !~ $new_value) {
                $newline = $current_gconf_line;
            }

            last;
        }
    }

    push(@new_gconf_lines, "$newline");
}

open my $fh, '>', $global_conf_filename or die "Failed to open '$global_conf_filename': $!";
print $fh join("\n", @new_gconf_lines);
close $fh;

print "Update global.conf file done...\n";
