#!/usr/bin/perl
###############################################################################
#
#    RELIANOID Software License
#    This file is part of the RELIANOID Load Balancer software package.
#
#    Copyright (C) 2014-today RELIANOID
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

use strict;
use warnings;
use feature qw(say signatures);

use Relianoid::Log;
use Relianoid::Farm::Core;
use Relianoid::Farm::Base;
use Relianoid::Farm::Action;
use Relianoid::FarmGuardian;
use Relianoid::Net::Core;
use Relianoid::Net::Interface;
use Relianoid::Net::Route;
use Relianoid::Net::Util;
use Relianoid::Lock;

local $ENV{SCRIPT_NAME} = 'relianoid';
local $SIG{__WARN__}    = \&warning_signal;

my $eload = eval { require Relianoid::ELoad };

my $basedir           = &getGlobalConfiguration('basedir');
my $configdir         = &getGlobalConfiguration('configdir');
my $defaultgw         = &getGlobalConfiguration('defaultgw');
my $defaultgwif       = &getGlobalConfiguration('defaultgwif');
my $defaultgw6        = &getGlobalConfiguration('defaultgw6');
my $defaultgwif6      = &getGlobalConfiguration('defaultgwif6');
my $docker_flag       = &getGlobalConfiguration('docker_flag');
my $bin_dir           = &getGlobalConfiguration('bin_dir');
my $systemctl         = &getGlobalConfiguration('systemctl');
my $snmpd_srv         = &getGlobalConfiguration('snmpd_service');
my $ssh_srv           = &getGlobalConfiguration('sshService');
my $cherokee_srv      = &getGlobalConfiguration('http_server_service');
my $cron_service      = &getGlobalConfiguration('cron_service');
my $relianoid_service = &getGlobalConfiguration('relianoid_service');
my $action            = shift @ARGV // '';
my $print_msg         = "";

if ($action !~ /^(start|stop|restart)$/) {
    print "Usage: relianoid start|stop|restart\n";
    exit 0;
}

sub printAndLog (@params) {
    print("@params\n");
    log_info("@params");
    return;
}

# Read interfaces data blocks
sub getInterfaceBlocks (@file_lines) {
    my @interface_list = ();
    my @interface      = ();
    my $in_block       = undef;

    while (my $line = shift @file_lines) {
        next if $line =~ /^\s*$/;     # skip blank lines
        next if $line =~ /^\s*#/;     # skip commented lines
        next if $line =~ /^auto /;    # skip auto lines

        chomp $line;

        if ($line =~ /^iface /) {
            $in_block = 'true';

            if (@interface)    # exclude first block
            {
                my (@array) = @interface;
                push(@interface_list, \@array);    # store previous iface
            }

            @interface = ($line);                  # start new interface
        }
        elsif ($in_block) {
            push(@interface, $line);               # store previous iface
        }
    }

    # for last block found
    if (@interface) {
        push(@interface_list, \@interface);        # store last iface
    }

    return @interface_list;
}

sub local_http_service ($command) {
    die "local_http_service '$command' command not recognized"
      unless $command =~ /^(?:start|stop|restart)$/;

    &logAndRunBG("$systemctl $command $cherokee_srv");
    return;
}

sub import_system_network_interfaces () {
    # import system interface to RELIANOID if configured
    #testing interface configured on the installation and gw

    my $etc_network_interfaces = "/etc/network/interfaces";

    if (!-e $etc_network_interfaces) {
        return;
    }

    my @file = ();

    if (open my $fr, '<', $etc_network_interfaces) {
        @file = <$fr>;
        close $fr;
    }
    else {
        my $msg = "Could not open file $etc_network_interfaces: $!";
        printAndLog($msg);
    }

    if (grep { /relianoid_modified/ } @file) {
        return;
    }

    my @blocks = &getInterfaceBlocks(@file);

    for my $block (@blocks) {
        my ($ifname, $ip, $netmask, $gateway);

        for my $line (@{$block}) {
            chomp($line);

            if ($line =~ /iface.*inet static/i) {
                (undef, $ifname) = split(" ", $line);
            }
            elsif ($line =~ /\Waddress/i) {
                my (undef, $ip_n_mask) = split(" ", $line);
                my $mask;
                ($ip, $mask) = split("/", $ip_n_mask);

                if ($mask)    # only when bitmask is declared
                {
                    require Net::Netmask;
                    my $block = Net::Netmask->new2($ip_n_mask);

                    if ($block) {
                        $netmask = $block->mask;
                    }
                    else {
                        &log_info($Net::Netmask::error);
                        die $Net::Netmask::error;
                    }
                }
            }
            elsif ($line =~ /netmask/i) {
                (undef, $netmask) = split(" ", $line);
            }
            elsif ($line =~ /gateway/i) {
                (undef, $gateway) = split(" ", $line);
            }
        }

        my %interface = (
            name    => $ifname,
            addr    => $ip,
            mask    => $netmask,
            gateway => $gateway,
            status  => "up",
        );

        # Write interface file
        if ($interface{name}) {
            &log_info("Writing interface: $interface{name}");
            &setInterfaceConfig(\%interface);

            # gateway
            if ($interface{gateway}) {
                &log_info("Writing gateway: $interface{gateway}");
                setGlobalConfiguration('defaultgw',   $gateway);
                setGlobalConfiguration('defaultgwif', $ifname);
            }

            # route table
            &log_info("Writing route table: $interface{name}");
            &writeRoutes($interface{name});
        }
    }

    # overwriting interfaces file
    my $file_content =            #
      "# relianoid_modified\n"    #
      . "auto lo\n"               #
      . "iface lo inet loopback\n";

    if (open my $fh, '>', $etc_network_interfaces) {
        print $fh $file_content;
        close $fh;
    }
    else {
        my $msg = "Could not open file $etc_network_interfaces: $!";
        printAndLog($msg);
    }

    return;
}

if ($action eq "restart") {
    # do not use 'logAndRun' function, it is necessary to print the stdoutput
    system("$systemctl restart $relianoid_service");
    &local_http_service('restart');    # force a cherokee restart
}

if ($action eq "start") {
    # do not use 'logAndRun' function, it is necessary to print the stdoutput
    system('/usr/local/relianoid/bin/checkglobalconf');

    # Configure NIC interfaces in docker.
    if (-f $docker_flag) {
        &logAndRun("$bin_dir/check-nic-dhcp");
    }

    # ZNA firmware upgrade
    my $migration_flag = &getGlobalConfiguration('migration_flag', 1);
    if (-e $migration_flag) {
        my $rm = &getGlobalConfiguration('rm');

        if ($eload) {
            &eload(module => 'Relianoid::EE::Hw', func => 'setHwZNAVersion',);
        }

        # Migrating config files
        &migrateConfigFiles();
        &logAndRun("$rm $migration_flag");
    }

    my $version = &getGlobalConfiguration('version');

    &printAndLog("Starting RELIANOID Load Balancer v$version");

    if ($eload) {
        $print_msg = &eload(
            module => 'Relianoid::EE::Service',
            func   => 'service_cert_message',
        );
        print $print_msg . "\n" if $print_msg;
    }

    # Load required modules
    require Relianoid::Farm::L4xNAT::Service;
    &loadL4FarmModules();

    &log_info("RELIANOID: Modules loaded");

    import_system_network_interfaces();

    if ($eload) {
        $print_msg = &eload(module => 'Relianoid::EE::Service', func => 'start_service');
        print $print_msg if $print_msg;
    }

    print("* Starting Interfaces:\n");

    my $ip_bin            = &getGlobalConfiguration('ip_bin');
    my @interfaces        = @{ &getConfigInterfaceList() };
    my @system_interfaces = &getInterfaceList();

    &log_info("RELIANOID: Setting up NIC interfaces...");
    require Relianoid::Net::Core;

    # first real interfaces
    for my $iface (@interfaces) {
        if ($eload) {
            next if (defined $iface->{type} and $iface->{type} eq 'bond');
            next unless &eload(
                module => 'Relianoid::EE::VPN::Core',
                func   => 'getVpnExists',
                args   => [ $$iface{name} ]
            );
        }

        # interfaces as eth0 for example
        if ($$iface{name} eq $$iface{dev}) {
            # check if it is an existent device
            if (!grep { $$iface{name} eq $_ } @system_interfaces) {
                &log_info("RELIANOID: Nonexistent NIC interface $$iface{name} Config found!.");

                # skip ethX types, ethA1 for example
                next if ($$iface{name} =~ /eth(?:[a-z]|[A-Z])+/);

                # remove interface config
                my $if_file = &getInterfaceConfigFile($$iface{name});
                if (-f $if_file) {
                    &log_info("RELIANOID: Deleting Nonexistent NIC interface Config File $if_file.");
                    unlink $if_file;
                }

                # remove rt_tables entry
                require Relianoid::Net::Route;
                &deleteRoutesTable($$iface{name});

                # remove routing config
                if ($eload) {
                    eload(
                        module => 'Relianoid::EE::Net::Routing',
                        func   => 'delRoutingDependIface',
                        args   => ["$$iface{name}"]
                    );
                }

                # remove gw entry
                if ($$iface{name} eq &getGlobalConfiguration('defaultgwif')) {
                    &setGlobalConfiguration('defaultgw',   '');
                    &setGlobalConfiguration('defaultgwif', '');
                }
                elsif ($$iface{name} eq &getGlobalConfiguration('defaultgwif6')) {
                    &setGlobalConfiguration('defaultgw6',   '');
                    &setGlobalConfiguration('defaultgwif6', '');
                }
                next;
            }

            use IO::Interface ':flags';

            if ($$iface{status} eq "up") {
                print("  * Starting interface $$iface{name}\n");
                &upIf($iface);

                if (exists $$iface{addr} and length $$iface{addr}) {
                    print("    Ip:$$iface{addr} Netmask:$$iface{mask} ");

                    if (defined $$iface{gateway} and $$iface{gateway} ne '') {
                        print("Gateway:$$iface{gateway} ");
                    }

                    my $return_code = &addIp($iface);

                    if ($return_code) {
                        my @ip_output = @{ &logAndGet("$ip_bin address show dev $$iface{name}", "array") };

                        if (grep { /$$iface{addr}/ } @ip_output) {
                            $return_code = 0;
                        }
                    }

                    # kept in case it is required for first interface
                    &writeRoutes($$iface{name});

                    &applyRoutes("local", $iface);

                    if ($return_code == 0) {
                        print("\033[1;32m OK \033[0m\n");
                    }
                    else {
                        print("\033[1;31m ERROR \033[0m\n");
                    }
                }

                if (defined $$iface{ip_v} and $$iface{ip_v} == 4) {
                    &sendGPing($$iface{name});
                }
            }
        }
    }

    # bugfix, force the start of the ssh and http services
    &logAndRun("$systemctl start $ssh_srv");
    &logAndRun("$systemctl start $cherokee_srv");

    &log_info("RELIANOID: Setting up VLAN interfaces...");

    # vlans interfaces (ie. eth0.20)
    for my $iface (@interfaces) {
        if ($$iface{vlan} and not defined $$iface{vini}) {
            unless (scalar grep { $$iface{name} eq $_ } &getLinkNameList()) {
                &createIf($iface);
            }

            if ($eload) {
                eload(
                    module => 'Relianoid::EE::Net::Mac',
                    func   => 'addMAC',
                    args   => [ $iface->{name}, $iface->{mac} ]
                );
            }

            my $return_code = &addIp($iface);

            if ($$iface{status} eq "up") {
                print("  * Starting interface $$iface{name}\n");
                print("    Ip:$$iface{addr} Netmask:$$iface{mask} ");

                if ($$iface{gateway}) {
                    print("Gateway:$$iface{gateway} ");
                }

                &upIf($iface);

                if ($return_code) {
                    my @ip_output = @{ &logAndGet("$ip_bin address show dev $$iface{name}", "array") };
                    if (grep { /$$iface{addr}/ } @ip_output) {
                        $return_code = 0;
                    }
                }

                if ($return_code == 0) {
                    print("\033[1;32m OK \033[0m\n");
                }
                else {
                    print("\033[1;31m ERROR \033[0m\n");
                }

                &applyRoutes("local", $iface);

                if ($$iface{ip_v} == 4) {
                    &sendGPing($$iface{name});
                }
            }
        }
    }

    # Hook to enable cluster and modules
    if ($eload) {
        &log_info("RELIANOID: Setting up Cluster...");

        $print_msg = &eload(module => 'Relianoid::EE::Service', func => 'start_cluster');
        print $print_msg . "\n" if $print_msg;

        $print_msg = &eload(module => 'Relianoid::EE::Service', func => 'enable_cluster');
        print $print_msg . "\n" if $print_msg;

        $print_msg = &eload(module => 'Relianoid::EE::Service', func => 'start_modules');
        print $print_msg . "\n" if $print_msg;
    }

    &log_info("RELIANOID: Setting up virtual interfaces...");

    # virtual interfaces (ie. eth0:20, eth0.20:2)
    for my $iface (@interfaces) {
        next unless defined $$iface{vini};
        next unless $$iface{status} eq "up";

        print("  * Starting interface $$iface{name}\n");
        print("    Ip:$$iface{addr} Netmask:$$iface{mask}");

        my $return_code = &addIp($iface);

        if ($return_code) {
            my $toif = &getParentInterfaceName($$iface{name});
            &log_info("failed addIp");
            my @ip_output = @{ &logAndGet("$ip_bin -$$iface{ip_v} address list dev $toif", "array") };
            if (grep { /$$iface{addr}/ } @ip_output) {
                $return_code = 0;
            }
        }

        &applyRoutes("local", $iface);

        &eload(
            module => 'Relianoid::EE::Net::Routing',
            func   => 'applyRoutingDependIfaceVirt',
            args   => [ 'add', $iface ]
        ) if $eload;

        if ($return_code == 0) {
            print(" \033[1;32m OK \033[0m \n");
        }
        else {
            print(" \033[1;31m ERROR \033[0m \n");
        }

        if ($$iface{ip_v} == 4) {
            my ($parent_if) = split(":", $$iface{name});
            &sendGPing($parent_if);
        }
    }

    &configureDefaultGW();

    if ($eload) {
        print("* Starting VPNs:\n");
        my $vpns = &eload(module => 'Relianoid::EE::VPN::Core', func => 'getVpnList');

        &log_info("RELIANOID: Setting up vpns...");
        for my $vpn_name (@{$vpns}) {
            my $bstatus = &eload(
                module => 'Relianoid::EE::VPN::Core',
                func   => 'getVpnBootstatus',
                args   => ["$vpn_name"]
            );
            if ($bstatus and $bstatus eq "up") {
                print("  * Starting VPN $vpn_name:");
                my $status = &eload(
                    module => 'Relianoid::EE::VPN::Action',
                    func   => 'runVPNStart',
                    args   => [ "$vpn_name", "false" ]
                );

                if ($status == 0) {
                    print(" \033[1;32m OK \033[0m \n");
                }
                else {
                    print(" \033[1;31m ERROR \033[0m \n");
                }
            }
            else {
                print("  VPN $vpn_name configured DOWN\n");
            }
        }
    }

    if (not $eload or not &eload(module => 'Relianoid::EE::Service', func => 'service_start_farms')) {
        print("* Starting Farms:\n");
        &getGlobalConfiguration(undef, 1);

        my @farmsf    = &getFarmList();
        my $enable_fg = 1;

        $enable_fg = &eload(module => 'Relianoid::EE::Service', func => 'getEnableFarmGuardian')
          if $eload;

        &log_info("RELIANOID: Setting up farms...");

        for my $ffile (@farmsf) {
            my $farmname = &getFarmName($ffile);
            my $bstatus  = &getFarmBootStatus($farmname);

            if ($bstatus eq "up") {
                print("  * Starting Farm $farmname:");
                my $status = &runFarmStart($farmname, "false");

                if ($status == 0) {
                    print(" \033[1;32m OK \033[0m \n");
                }
                else {
                    print(" \033[1;31m ERROR \033[0m \n");
                }

                #farmguardian configured and up?
                if ($status == 0) {
                    print("  * Starting FarmGuardian for $farmname:");
                    my $stat = &runFGFarmStart($farmname);
                    if ($stat == 0) {
                        print(" \033[1;32m OK \033[0m \n");
                    }
                    else {
                        print(" \033[1;31m ERROR \033[0m \n");
                    }
                }
            }
            else {
                print("  Farm $farmname configured DOWN\n");
            }
        }
    }

    # Reload cron file
    my $cron_conf = &getGlobalConfiguration('cron_conf');
    if (!-e $cron_conf) {
        my $cron_tpl = &getGlobalConfiguration('cron_tpl');

        use File::Copy;
        copy($cron_tpl, $cron_conf);
    }

    # Reload the notifications cron file
    if ($eload) {
        my $notif_license_status = &eload(
            module => "Relianoid::EE::Notify",
            func   => "getNotifData",
            args   => [ 'alerts', 'License', 'Status' ],
        );
        my $notif_package_status = &eload(
            module => "Relianoid::EE::Notify",
            func   => "getNotifData",
            args   => [ 'alerts', 'Package', 'Status' ],
        );
        my $notif_certificate_status = &eload(
            module => "Relianoid::EE::Notify",
            func   => "getNotifData",
            args   => [ 'alerts', 'Certificate', 'Status' ],
        );
        if (   $notif_license_status eq 'on'
            || $notif_package_status eq 'on'
            || $notif_certificate_status eq 'on')
        {
            &eload(module => "Relianoid::EE::Notify", func => "setNotifCronConfig");
        }
    }

    # At this point every relianoid interface and farm is running
    # now a personalized script can be executed
    my $start_script = &getGlobalConfiguration('start_script');

    &printAndLog("Running $start_script ...");
    my @ownscript = `$start_script 2>&1`;
    &printAndLog(@ownscript) if (@ownscript);
    &printAndLog("End of $start_script");

    # make sure related system services are running
    if (&logAndRunCheck("$systemctl status $ssh_srv")) {
        &logAndRun("$systemctl start $ssh_srv");
    }

    my $snmpdstatus = &logAndGet("$systemctl is-enabled $snmpd_srv");
    if ($snmpdstatus eq 'enabled') {
        # Bugfix: SNMP didn't start if the IP is not up
        &logAndRun("$systemctl restart $snmpd_srv");
    }

    &local_http_service('start');

    # Check the failback configuration
    if ($eload) {
        if (&eload(module => 'Relianoid::EE::Cluster', func => 'checkClusterLocalIsPrimary')) {
            &log_debug("Local node detected as primary", "cluster");
            &eload(module => 'Relianoid::EE::Cluster', func => 'enableCluster');
        }

        my $node_status = &eload(module => 'Relianoid::EE::Cluster', func => 'getClusterNodeStatus');

        if (defined $node_status and $node_status eq "backup") {
            &log_info("conntrackd Synchronization against master");
            my $primary_backup = &getGlobalConfiguration('primary_backup');
            &logAndRun("$primary_backup backup");
        }
    }

    &printAndLog("Start process finished.");
}

if ($action eq "stop") {
    &printAndLog("Stopping RELIANOID Load Balancer...");

    if ($eload) {
        $print_msg = &eload(
            module => 'Relianoid::EE::Service',
            func   => 'service_cert_message',
        );
        print $print_msg . "\n" if $print_msg;

        $print_msg = &eload(module => 'Relianoid::EE::Service', func => 'stop_service');
        print $print_msg . "\n" if $print_msg;
    }

    print("* Stopping Farms:\n");

    for my $ffile (getFarmList()) {
        my $farmname = &getFarmName($ffile);
        my $status   = &getFarmStatus($farmname);

        if ($status eq "up") {
            #farmguardian configured and up?
            my $fgstatus = &getFarmGuardianPid($farmname);

            if ($fgstatus != -1) {
                print("  * Stopping Farm Guardian for $farmname:");
                my $stat = &runFarmGuardianStop($farmname, "");

                if ($stat == 0) {
                    print(" \033[1;32m OK \033[0m \n");
                }
                else {
                    print(" \033[1;31m ERROR \033[0m \n");
                }
            }

            print("  * Stopping Farm $farmname:");
            my $status = &runFarmStop($farmname, "false");

            if ($status == 0) {
                print(" \033[1;32m OK \033[0m \n");
            }
            else {
                print(" \033[1;31m ERROR \033[0m \n");
            }
        }
        elsif ($status eq "down") {
            if (&getFarmType($farmname) =~ "^http") {
                use Relianoid::Farm::HTTP::Action;
                &checkFarmHTTPSystemStatus($farmname, "down", "true");
            }
        }
    }

    print("* Stopping nftlb service:");

    my $nftlb_svc = &getGlobalConfiguration('nftlb_svc');
    &logAndRun("$nftlb_svc stop");

    my $status  = &logAndGet("$nftlb_svc status");
    my $stopped = grep { /nftlb is not running/ } $status;

    if   ($stopped) { print(" \033[1;32m OK \033[0m \n"); }
    else            { print(" \033[1;31m ERROR \033[0m \n"); }

    if ($eload) {
        print("* Stopping VPNs:\n");
        my $vpns = &eload(module => 'Relianoid::EE::VPN::Core', func => 'getVpnList');

        for my $vpn_name (@{$vpns}) {
            my $status = &eload(
                module => 'Relianoid::EE::VPN::Core',
                func   => 'getVpnStatus',
                args   => ["$vpn_name"]
            );
            if ($status and $status eq "up") {
                print("  * Stopping VPN $vpn_name:");
                my $status = &eload(
                    module => 'Relianoid::EE::VPN::Action',
                    func   => 'runVPNStop',
                    args   => [ "$vpn_name", "false" ]
                );

                if ($status == 0) {
                    print(" \033[1;32m OK \033[0m \n");
                }
                else {
                    print(" \033[1;31m ERROR \033[0m \n");
                }
            }
        }
    }

    print("* Stopping Virtual Interfaces:\n");

    # Virtual Network Interfaces
    for my $iface (@{ &getConfigInterfaceList() }) {
        if (defined $$iface{vini}) {
            print("  * Down interface $$iface{name}\n");
            print("    Ip:$$iface{addr} Netmask:$$iface{mask}");

            my $return_code = &stopIf($iface);

            if ($return_code == 0) {
                print(" \033[1;32m OK \033[0m \n");
            }
            else {
                print(" \033[1;31m ERROR \033[0m \n");
            }
        }
    }

    &eload(module => 'Relianoid::EE::Service', func => 'disable_cluster') if $eload;

    &configureDefaultGW();

    # At this point every relianoid interface and farm is stopped
    # now a personalized script can be executed
    my $stop_script = &getGlobalConfiguration('stop_script');

    &printAndLog("Running $stop_script ...");
    my @ownscript = `$stop_script 2>&1`;
    &printAndLog(@ownscript) if @ownscript;
    &printAndLog("End of $stop_script");

    &printAndLog("Stop process finished...");
}

