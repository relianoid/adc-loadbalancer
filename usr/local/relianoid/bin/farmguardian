#!/usr/bin/perl
###############################################################################
#
#    RELIANOID Software License
#    This file is part of the RELIANOID Load Balancer software package.
#
#    Copyright (C) 2014-today RELIANOID
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

##farmguardian 4.1
#this script is a service that check all Bakends or servers in a farm
#using a script to monitorice the status of backends.  If the execution script return
# <> 0 this script put in blacklist the backendserver. This script check
#the timeout execution of a script
#parameters:
#
#	>./farmguardian farmname [-s <service>] [-l]
#
#fileconfig_penguardian structure:
#[farmname]:::[timeout]:::[timetocheck]:::[script args]:::[logs]

use 5.036;
use strict;
use warnings;

#use Data::Dumper;
use Proc::Daemon;
use POSIX ":sys_wait_h";

use Relianoid::Log;
use Relianoid::Config;
use Relianoid::Farm::Core;
use Relianoid::FarmGuardian;

my $zcluster_send_action = "/usr/local/relianoid/bin/zcluster-send-action";
my $configdir            = &getGlobalConfiguration('configdir');
my $libexec_dir          = &getGlobalConfiguration('libexec_dir');
my $fgmarkbin            = &getGlobalConfiguration('fgmark');

my $eload;
if (eval { require Relianoid::ELoad; }) {
    $eload = 1;
}

# print usage help if no argument was given
if (not defined $ARGV[0]) {
    &printHelp();
    exit 1;
}

# declare global variables
my $farmname = shift @ARGV;
my $service  = '';
my $fservice = '';
my $logging  = 'disabled';
my $useAlias = 'false';
my $fg_conf;
my $timetocheck;
my $timeout;
my $check_cmd_tpl;
my $http_prio;
my $cutConns;
my $pidfile;

# validate FARM TYPE
my $type = &getFarmType($farmname);
unless ($type =~ /^(?:http|https|l4xnat)$/) {
    my $msg = "FarmGuardian does not support $type farm profile";
    &zenlog($msg);
    exit -1;
}

## Get commandline arguments
my $arg;
for (my $it = 0 ; $it <= $#ARGV ; $it++) {
    $arg = $ARGV[$it];

    #~ shift @ARGV;
    if ($arg eq "-s") {
        print "it : $it\n";
        $service  = $ARGV[ ++$it ];
        $fservice = "${service}_";
    }
    elsif ($arg eq "-l") {
        $logging = 'enabled';
    }
    elsif ($arg eq "-a" and $eload) {
        $useAlias = 'true';
    }
    else {
        &printHelp();
        exit 1;
    }
}

# declare config files/path
$pidfile = "${farmname}_${fservice}guardian.pid";

my $fgname = &getFGFarm($farmname, $service);
if (not $fgname) {
    my $ms  = ($service) ? "farm $farmname, service $service" : "farm $farmname";
    my $msg = "Abort: Configuration for farm $ms was not found";

    if ($logging eq 'enabled') {
        &zenlog($msg);
    }
    else {
        print "$msg\n";
    }

    exit -1;
}
else {
    $fg_conf     = &getFGObject($fgname);
    $timetocheck = $fg_conf->{interval};
    $timeout     = $fg_conf->{timeout};
    if ($fg_conf->{command} =~ /(.*);(\w+)\s+((:?\d\s*)+)$/) {
        $check_cmd_tpl = $1;
        @{$http_prio} = split(/\s+/, $3) if $2 eq "priority";
    }
    else {
        $check_cmd_tpl = $fg_conf->{command};
    }
    $cutConns = $fg_conf->{cut_conns};
    $useAlias = $fg_conf->{backend_alias} if ($useAlias ne 'true');         #
    $logging  = 'enabled'                 if ($fg_conf->{log} eq 'true');
}

# create farmguardian pidfile
my $filepid = "/var/run/$pidfile";
{
    open(my $fo, '>', "$filepid");
    if (not $fo) {
        my $msg = "Cannot open file $filepid: $!";

        if ($logging eq 'enabled') {
            &zenlog($msg);
        }
        else {
            print "$msg\n";
        }

        exit 1;
    }

    print $fo "$$";
    close $fo;
}

# get farm port to use it if a backend has not defined the port field
require Relianoid::Farm::Config;
my $farm_st = &getFarmStruct($farmname);

#Ask for the farm type
$type = 'http' if $type eq 'https';

my $proxyctl;
my $portadmin;
my $usemark = 0;

if ($type eq 'l4xnat') {
    require Relianoid::Farm::L4xNAT::Backend;
    $usemark = 1;
}
elsif ($type eq 'http') {
    require Relianoid::Farm::HTTP::Backend;
    require Relianoid::Farm::HTTP::Config;
    require Relianoid::Farm::HTTP::Service;

    $proxyctl  = &getGlobalConfiguration('proxyctl');
    $portadmin = &getHTTPFarmSocket($farmname);

    my $proxy_ng = &getGlobalConfiguration('proxy_ng');
    $usemark = $proxy_ng eq "true" ? 1 : 0;

}

# This is a cluster bugfix, to ensure the backend status is correct in the config file.
my $first_exec = 1;

#Get servers list
while (1) {
    my @backendid;
    my @backendserv;
    my @backendip;
    my @backendport;
    my @backendstatus;
    my @backendprio;
    my @backendmark;
    my @backendorder;
    my @bk_prio_proxyng;
    my $i = 0;

    ### Collect variable values for the diferent farm types ###

    # Collect HTTP/S farm variables values
    if ($type eq 'http') {
        my $proxy_ng = &getGlobalConfiguration('proxy_ng');
        my $status   = &getHTTPFarmStatus($farmname);
        if ($status ne "up") {
            my $msg = "Farm $farmname is down, abort.";

            if ($logging eq 'enabled') {
                &zenlog($msg);
            }
            else {
                print "$msg\n";
            }

            exit 1;
        }

        my $backendsvs = &getHTTPFarmVS($farmname, $service, "backends");

        foreach my $line (split("\n", $backendsvs)) {
            my @subbe = split(' ', $line);
            $backendmark[$i] = $subbe[15] if $usemark;
            $backendid[$i]   = $subbe[1];
            $backendserv[$i] =
              ($useAlias eq 'true') ? &getFGAlias($subbe[3]) : $subbe[3];
            $backendip[$i]     = $subbe[3];
            $backendport[$i]   = $subbe[5];
            $backendstatus[$i] = &getHTTPBackendStatusFromFile($farmname, $i, $service);
            if ($proxy_ng eq 'true') {
                $bk_prio_proxyng[$i] = ($subbe[9] eq '-') ? 1 : $subbe[9];
            }
            if (defined $http_prio) {

                if ($proxy_ng ne "true") {
                    if (defined @{$http_prio}[$i]) {
                        $backendprio[$i] = @{$http_prio}[$i];
                    }
                    else {

                        # Priority 1 by default
                        $backendprio[$i] = 1;
                    }
                }
            }
            $i++;
        }

        # reorder backends by prio if defined
        if (@backendprio) {
            my $index = 0;
            my $order;
            foreach my $prio (@backendprio) {
                push @{ $order->{$prio} }, $index;
                $index++;
            }
            foreach my $prio (sort keys %{$order}) {
                push @backendorder, @{ $order->{$prio} };
            }
        }

        # get the farm's timeout
        #~ $timeout = &getFarmTimeout( $farmname );
    }
    elsif ($type eq 'l4xnat')    # Collect L4xNAT farm variables values
    {
        my $be = &getL4FarmServers($farmname);
        foreach my $l_serv (@{$be}) {
            $backendid[$i] = $l_serv->{id};
            $backendserv[$i] =
              ($useAlias eq 'true')
              ? &getFGAlias($l_serv->{ip})
              : $l_serv->{ip};
            $backendmark[$i] = hex($l_serv->{tag}) if $usemark;
            $backendport[$i] = $l_serv->{port}
              // $farm_st->{vport};    # use farm port if backend port is not defined
            $backendport[$i]   = $farm_st->{vport} if ($backendport[$i] eq "");
            $backendprio[$i]   = $l_serv->{priority};
            $backendstatus[$i] = $l_serv->{status};
            $i++;
        }
    }

    # Use the default timetocheck as the timeout for the backends response
    if (not defined $timeout) {
        $timeout = $timetocheck;
    }

    # print farm check details
    if ($logging eq 'enabled') {
        my $logline = '';
        $logline .= "Farm $farmname - ";
        $logline .= "Service $service - " if $service ne '';
        $logline .= "timetocheck $timetocheck - ";
        $logline .= "portadmin $portadmin - " if defined $portadmin;
        $logline .= "command $check_cmd_tpl";
        if (@backendorder) {
            $logline .= " - prio: ";
            foreach my $prio (@{$http_prio}) {
                $logline .= "$prio ";
            }
        }

        &zenlog($logline);
    }

    # backend loop. checking every backend.
    my $backendidx = 0;
    my $j;
    my $svc_prio = 1;

    my $logheader;
    my $logline;
    my $command;
  BACKEND_IDX:
    while ($backendidx < $i) {
        if (@backendorder) {
            $j = $backendorder[$backendidx];
        }
        else {
            $j = $backendidx;
        }

        if ($logging eq 'enabled') {
            $logheader = "Farm $farmname - ";
            $logheader .= "Service $service - " if $service ne '';
            $logheader .= "server[$backendid[$j]] $backendserv[$j]";
            $logheader .= ":$backendport[$j]" if $backendport[$j];
            $logline = $logheader;
            $logline .= " - priority $backendprio[$j]"
              if defined $backendprio[$j];
            $logline .= " - status $backendstatus[$j] - ";
        }

        # jump to next backend if this one is in maintenance
        if ($backendstatus[$j] =~ /maintenance/) {
            $backendidx++;
            if (defined $backendprio[$j]) {
                if ($backendprio[$j] <= $svc_prio) {
                    $svc_prio++;
                    if ($logging eq 'enabled') {
                        &zenlog("$logheader increasing service priority to $svc_prio");
                    }
                }
                $logline .= "service priority $svc_prio";
            }
            if ($logging eq 'enabled') {
                &zenlog($logline);
            }
            next BACKEND_IDX;
        }

        $command = $check_cmd_tpl;

        # substitute HOST and PORT variables for this backend's values
        $command =~ s/HOST/$backendserv[$j]/g;
        $command =~ s/PORT/$backendport[$j]/g;

        #execute the binary to check
        $command = "$libexec_dir/$command";

        $command = "MARK=$backendmark[$j] LD_PRELOAD=$fgmarkbin " . $command
          if (defined $fgmarkbin and $usemark);

        my @output;
        my $timedout     = 0;
        my $errorcode    = '';
        my $status_error = -1;

        # run actual backend check
        eval {
            local $SIG{ALRM} = sub { return; };

            #~ alarm $timeout;
            $timedout  = 1 if (alarm $timeout) != 0;
            @output    = `$command`;
            $errorcode = $?;
            alarm 0;
        } or do {
            my $kid;
            $timedout = 1;

            do {
                $kid = waitpid(-1, WNOHANG);
            } while $kid > 0;
        };

        my $http_prio_enable  = 1;
        my $http_prio_disable = 0;
        if (@backendorder) {
            if ($backendprio[$j] > $svc_prio) {
                $http_prio_enable  = 0;
                $http_prio_disable = 1;

                if ($backendstatus[$j] eq 'fgDOWN') {
                    $http_prio_disable = 0;
                }
            }
        }
        if ((defined $backendprio[$j]) and ($backendprio[$j] <= $svc_prio)) {
            if (    ($timedout == 1 or $errorcode != 0)
                and ($backendstatus[$j] eq 'fgDOWN'))
            {
                $svc_prio++;
                if ($logging eq 'enabled') {
                    &zenlog("$logheader increasing service priority to $svc_prio");
                }
            }
        }

        # being verbose the check output
        if ($logging eq 'enabled') {
            if (defined $backendprio[$j]) {
                $logline .= "service priority $svc_prio - ";
            }
            &zenlog($logline . "timedout $timedout - errorcode $errorcode");
        }

        ### Enable backend
        my $auxLog;
        if (
            (
                ($timedout == 0 and $errorcode == 0 and $backendstatus[$j] =~ /down/i)
                or $first_exec
            )
            and $http_prio_enable
          )
        {
            if ($logging eq 'enabled') {
                &zenlog(
                    "**execution OK in server $j - errorcode:$errorcode - timedout:$timedout - backend state:$backendstatus[$j]"
                );
            }

            # Enabling backend for every type of farm supported
            if ($type eq 'http') {
                if ($first_exec) {
                    $status_error =
                      &setHTTPFarmBackendStatus($farmname, $service, $backendid[$j], 'up', "");
                }
                else {
                    my @backends;
                    my $y = 0;
                    foreach my $bk (@backendstatus) {
                        if ($bk eq "active") {
                            $backends[$y]->{status} = "up";
                        }
                        else {
                            $backends[$y]->{status} = "down";
                        }
                        $y++;
                    }
                    $y = 0;
                    foreach my $bk (@bk_prio_proxyng) {
                        $backends[$y]->{priority} = $bk;
                        $y++;
                    }
                    $status_error =
                      &setHTTPFarmBackendStatus($farmname, $service,
                        $backendid[$j], 'up', 'cut', \@backends);
                }
                $auxLog = " in farm: '$farmname', service: '$service'";
            }
            elsif ($type eq 'l4xnat') {
                $auxLog       = " in farm: '$farmname'";
                $status_error = &setL4FarmBackendStatus($farmname, $backendid[$j], 'up');
            }

            $backendstatus[$j] = 'active';

            # WARNING: This message format is expected by 'sec'
            &zenlog("BackEnd $backendserv[$j]:$backendport[$j] resurrect$auxLog")
              if (not $first_exec
                and ($status_error->{code} != 1 and $status_error->{code} != -1));
        }
        ### Disable backend
        elsif (
            (
                (($timedout == 1 or $errorcode != 0) and $backendstatus[$j] ne 'fgDOWN')
                or $first_exec
            )
            or $http_prio_disable
          )
        {
            if ($logging eq 'enabled') {
                &zenlog("**execution error in ' $command ', output::**\n@output");
            }

            # Disabling backend for every type of farm supported
            #if exec error put in blacklist the server
            if ($type eq 'http') {
                if ($cutConns eq 'true') {
                    $status_error =
                      &setHTTPFarmBackendStatus($farmname, $service,
                        $backendid[$j], 'fgDOWN', 'cut');
                }
                else {
                    $status_error =
                      &setHTTPFarmBackendStatus($farmname, $service, $backendid[$j], 'fgDOWN', "");
                }
                $auxLog = " in farm: '$farmname', service: '$service'";
            }
            elsif ($type eq 'l4xnat') {
                if ($cutConns eq 'true') {
                    $status_error =
                      &setL4FarmBackendStatus($farmname, $backendid[$j], 'fgDOWN', 'cut');
                }
                else {
                    $status_error =
                      &setL4FarmBackendStatus($farmname, $backendid[$j], 'fgDOWN', "");
                }

                $auxLog = " in farm: '$farmname'";
            }
            if (defined $backendprio[$j] and ($backendprio[$j] <= $svc_prio)) {
                $svc_prio++;
                if ($logging eq 'enabled') {
                    &zenlog("$logheader increasing service priority to $svc_prio");
                }
            }

            $backendstatus[$j] = 'fgDOWN';

            # WARNING: This message format is expected by 'sec'
            &zenlog("BackEnd $backendserv[$j]:$backendport[$j] down$auxLog")
              if (not $first_exec
                and ($status_error->{code} != 1 and $status_error->{code} != -1));
        }
        $backendidx++;
    }

    $first_exec = 0;

    #~ &zenlog( "backendid " . Dumper( \@backendid ) );
    #~ &zenlog( "backendserv " . Dumper( \@backendserv ) );
    #~ &zenlog( "backendport " . Dumper( \@backendport ) );
    #~ &zenlog( "backendstatus " . Dumper( \@backendstatus ) );

    sleep($timetocheck);
}

sub printHelp {
    print
      "FarmGuardian v4.1. Check Backends Servers in a Farm and enable or disable the load balancing\n";
    print "\thelp: farmguardian <farmname> [-s <service>] [-l]";
    print " [-a]" if ($eload);
    print "\n";
    print "\t\t-s <service>\t: Launch FarmGuardian for a certain HTTP/S farm service\n";
    print "\t\t-l\t\t: Enable logs\n";
    print
      "\t\t-a\t\t: Use the backend alias to do the farmguardian check, the alias has to be resolved\n"
      if ($eload);
}

sub getFGAlias {
    my $bk = shift;
    require Relianoid::Config;
    my $alias_file = &getGlobalConfiguration("configdir") . "/alias.conf";

    my $st = &getTiny($alias_file);

    return $st->{'backend'}->{$bk} // $bk;
}

